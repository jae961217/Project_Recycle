{"version":3,"file":"kalman.js","sources":["../src/kalman.js"],"sourcesContent":["/**\n* KalmanFilter\n* @class\n* @author Wouter Bulten\n* @see {@link http://github.com/wouterbulten/kalmanjs}\n* @version Version: 1.0.0-beta\n* @copyright Copyright 2015-2018 Wouter Bulten\n* @license MIT License\n* @preserve\n*/\nexport default class KalmanFilter {\n\n  /**\n  * Create 1-dimensional kalman filter\n  * @param  {Number} options.R Process noise\n  * @param  {Number} options.Q Measurement noise\n  * @param  {Number} options.A State vector\n  * @param  {Number} options.B Control vector\n  * @param  {Number} options.C Measurement vector\n  * @return {KalmanFilter}\n  */\n  constructor({R = 1, Q = 1, A = 1, B = 0, C = 1} = {}) {\n\n    this.R = R; // noise power desirable\n    this.Q = Q; // noise power estimated\n\n    this.A = A;\n    this.C = C;\n    this.B = B;\n    this.cov = NaN;\n    this.x = NaN; // estimated signal without noise\n  }\n\n  /**\n  * Filter a new value\n  * @param  {Number} z Measurement\n  * @param  {Number} u Control\n  * @return {Number}\n  */\n  filter(z, u = 0) {\n\n    if (isNaN(this.x)) {\n      this.x = (1 / this.C) * z;\n      this.cov = (1 / this.C) * this.Q * (1 / this.C);\n    }\n    else {\n\n      // Compute prediction\n      const predX = this.predict(u);\n      const predCov = this.uncertainty();\n\n      // Kalman gain\n      const K = predCov * this.C * (1 / ((this.C * predCov * this.C) + this.Q));\n\n      // Correction\n      this.x = predX + K * (z - (this.C * predX));\n      this.cov = predCov - (K * this.C * predCov);\n    }\n\n    return this.x;\n  }\n\n  /**\n  * Predict next value\n  * @param  {Number} [u] Control\n  * @return {Number}\n  */\n  predict(u = 0) {\n    return (this.A * this.x) + (this.B * u);\n  }\n  \n  /**\n  * Return uncertainty of filter\n  * @return {Number}\n  */\n  uncertainty() {\n    return ((this.A * this.cov) * this.A) + this.R;\n  }\n  \n  /**\n  * Return the last filtered measurement\n  * @return {Number}\n  */\n  lastMeasurement() {\n    return this.x;\n  }\n\n  /**\n  * Set measurement noise Q\n  * @param {Number} noise\n  */\n  setMeasurementNoise(noise) {\n    this.Q = noise;\n  }\n\n  /**\n  * Set the process noise R\n  * @param {Number} noise\n  */\n  setProcessNoise(noise) {\n    this.R = noise;\n  }\n}\n"],"names":["KalmanFilter","R","Q","A","B","C","cov","NaN","x","z","u","isNaN","predX","predict","predCov","uncertainty","K","noise"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;;;;;IAUqBA;;;;;;;;;;;;0BAWmC;mFAAJ,EAAI;sBAAzCC,CAAyC;QAAzCA,CAAyC,uBAArC,CAAqC;sBAAlCC,CAAkC;QAAlCA,CAAkC,uBAA9B,CAA8B;sBAA3BC,CAA2B;QAA3BA,CAA2B,uBAAvB,CAAuB;sBAApBC,CAAoB;QAApBA,CAAoB,uBAAhB,CAAgB;sBAAbC,CAAa;QAAbA,CAAa,uBAAT,CAAS;;;;SAE/CJ,CAAL,GAASA,CAAT,CAFoD;;SAG/CC,CAAL,GAASA,CAAT,CAHoD;;SAK/CC,CAAL,GAASA,CAAT;SACKE,CAAL,GAASA,CAAT;SACKD,CAAL,GAASA,CAAT;SACKE,GAAL,GAAWC,GAAX;SACKC,CAAL,GAASD,GAAT,CAToD;;;;;;;;;;;;2BAkB/CE,GAAU;UAAPC,CAAO,uEAAH,CAAG;;UAEXC,KAAK,CAAC,KAAKH,CAAN,CAAT,EAAmB;aACZA,CAAL,GAAU,IAAI,KAAKH,CAAV,GAAeI,CAAxB;aACKH,GAAL,GAAY,IAAI,KAAKD,CAAV,GAAe,KAAKH,CAApB,IAAyB,IAAI,KAAKG,CAAlC,CAAX;OAFF,MAIK;;YAGGO,KAAK,GAAG,KAAKC,OAAL,CAAaH,CAAb,CAAd;YACMI,OAAO,GAAG,KAAKC,WAAL,EAAhB,CAJG;;YAOGC,CAAC,GAAGF,OAAO,GAAG,KAAKT,CAAf,IAAoB,KAAM,KAAKA,CAAL,GAASS,OAAT,GAAmB,KAAKT,CAAzB,GAA8B,KAAKH,CAAxC,CAApB,CAAV,CAPG;;aAUEM,CAAL,GAASI,KAAK,GAAGI,CAAC,IAAIP,CAAC,GAAI,KAAKJ,CAAL,GAASO,KAAlB,CAAlB;aACKN,GAAL,GAAWQ,OAAO,GAAIE,CAAC,GAAG,KAAKX,CAAT,GAAaS,OAAnC;;;aAGK,KAAKN,CAAZ;;;;;;;;;;8BAQa;UAAPE,CAAO,uEAAH,CAAG;aACL,KAAKP,CAAL,GAAS,KAAKK,CAAf,GAAqB,KAAKJ,CAAL,GAASM,CAArC;;;;;;;;;kCAOY;aACH,KAAKP,CAAL,GAAS,KAAKG,GAAf,GAAsB,KAAKH,CAA5B,GAAiC,KAAKF,CAA7C;;;;;;;;;sCAOgB;aACT,KAAKO,CAAZ;;;;;;;;;wCAOkBS,OAAO;WACpBf,CAAL,GAASe,KAAT;;;;;;;;;oCAOcA,OAAO;WAChBhB,CAAL,GAASgB,KAAT;;;;;;;;;"}